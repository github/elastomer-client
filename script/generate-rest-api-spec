#!/usr/bin/env ruby
# frozen_string_literal: true

# Usage:
#
#   script/generate-rest-api-spec <elasticsearch-version>
#
# Use this script to generate a REST API spec for the given
# `elasticserach-version`. This will create a new `ApiSpec` class configured
# to validate the request parameters for the particular Elasticsearch version.

require "erb"
require "rubygems"
require "bundler/setup"
require "json"

$LOAD_PATH.unshift "lib"
require "elastomer_client/version_support"

class RestApiSpecGenerator
  WORKING_DIR = "vendor/elasticsearch"

  attr_reader :version, :short_version, :class_version

  def initialize(version = "8.18")
    @version = version

    sliced = @version.split(".").slice(0, 2)
    @short_version = sliced.join(".")
    @class_version = sliced.join("_")

    @version_support = ElastomerClient::VersionSupport.new(version)
  end

  # Setup the working directory and generate the Ruby API spec for the
  # elasticsearch version.
  def run
    setup
    ruby = ERB.new(DATA.read, trim_mode: "-").result(binding)
    File.write(ruby_spec_filename, ruby)
  ensure
    reset
  end

  # The name of the Ruby API spec file for this particular Elasticsearch version.
  def ruby_spec_filename
    "lib/elastomer_client/client/rest_api_spec/api_spec_v#{class_version}.rb"
  end

  # Returns true if the elasticserach working directory exists.
  def working_dir_exists?
    File.directory?(WORKING_DIR) && File.exist?(WORKING_DIR)
  end

  # Iterate over each of the REST API specs yield the name and the descriptor
  # hash for that particular API spec.
  def each_api
    Dir.glob("#{WORKING_DIR}/rest-api-spec/src/main/resources/rest-api-spec/api/*.json").sort.each do |filename|
      next if filename =~ /\/_common\.json\Z/

      hash = JSON.parse(File.read(filename))
      key = hash.keys.first
      value = hash.values.first
      yield(key, value)
    end
  end

  # Iterate over each of the common request parameters and yield them as key /
  # value pairs.
  def each_common
    filename = "#{WORKING_DIR}/rest-api-spec/src/main/resources/rest-api-spec/api/_common.json"
    if File.exist? filename
      hash = JSON.parse(File.read(filename))
      hash["params"].each { |k, v| yield(k, v) }
    end
  end

  def generate_documentation(data)
    if @version_support.es_version_8_plus?
      data["documentation"]["url"].to_s
    else
      data["documentation"].to_s
    end
  end

  def generate_methods(data)
    if @version_support.es_version_8_plus?
      data["url"]["paths"].map { |h| h["methods"] }.flatten.uniq
    else
      Array(data["methods"]).to_s
    end
  end

  def generate_path(url)
    if @version_support.es_version_8_plus?
      url["paths"].map { |h| h["path"] }.flatten.uniq.first
    else
      url["path"]
    end
  end

  def generate_paths(url)
    if @version_support.es_version_8_plus?
      url["paths"].map { |h| h["path"] }.flatten.uniq
    else
      Array(url["paths"]).to_s
    end
  end

  def generate_parts(url)
    if @version_support.es_version_8_plus?
      url["paths"].map { |h| h["parts"] }.compact.reduce({}, :merge)
    else
      url["parts"]
    end
  end

  def generate_params(data)
    if @version_support.es_version_8_plus?
      data["params"]
    else
      data["url"]["params"]
    end
  end


  # Perform a sparse checkout of the elasticsearch git repository and then check
  # out the branch corresponding to the ES version passed to this script.
  def setup
    if !working_dir_exists?
      system <<-SH
        mkdir -p #{WORKING_DIR} &&
        cd #{WORKING_DIR} &&
        git init . &&
        git remote add -f origin https://github.com/elastic/elasticsearch.git &&
        git config core.sparsecheckout true &&
        echo /rest-api-spec/src/main/resources/rest-api-spec/api/ >> .git/info/sparse-checkout &&
        git pull origin main
      SH
    end

    system <<-SH
      cd #{WORKING_DIR} &&
      git pull origin main &&
      git checkout -q origin/#{short_version}
    SH
  end

  # Reset the elasticsearch working directory back to the main branch of the
  # git repository.
  def reset
    system <<-SH
      cd #{WORKING_DIR} &&
      git checkout main
    SH
  end
end

puts RestApiSpecGenerator.new(*ARGV).run

__END__
# frozen_string_literal: true
# Generated REST API spec file - DO NOT EDIT!
# Date: <%= Time.now.strftime("%Y-%m-%d") %>
# ES version: <%= version %>

module ElastomerClient::Client::RestApiSpec
  class ApiSpecV<%= class_version %> < ApiSpec
    def initialize
      @rest_apis = {
      <%- each_api do |name,data| -%>
        <%- url = data["url"] -%>
        "<%= name %>" => RestApi.new(
          documentation: "<%= generate_documentation(data) %>",
          methods: <%= generate_methods(data) %>,
          body: <%= data["body"] ? data["body"].to_s : "nil" %>,
          url: {
            path: "<%= generate_path(url) %>",
            paths: <%= generate_paths(url) %>,
<% if (parts = generate_parts(url)) && !parts.empty? -%>
            parts: [
<% parts.each do |k,v| -%>
              "<%= k %>",
<% end -%>
            ],
<% end -%>
<% params = generate_params(data) -%>
<% if !params.nil? && !params.empty? -%>
            params: [
<% params.each do |k,v| -%>
              "<%= k %>",
<% end -%>
            ]
<% end -%>
          }
        ),
<% end -%>
      }
      @common_params = [
<% each_common do |k,v| -%>
        "<%= k %>",
<% end -%>
      ]
      super
    end
  end
end
